import java.awt.Point;
import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Double;
import java.util.HashMap;

public class ColorMix
{
    public static void main( String[] args )
    {
        MunsellColorModel blue = new MunsellColorModel( "Y", 5, 1, 1 );
        MunsellColorModel green = new MunsellColorModel( "BG", 5, 1, 1 );

        MunsellColorModel result = twoColorMix( blue, green );
        System.out.print( result.toString() + "\n");
        
        
        MunsellColorModel red = new MunsellColorModel( "YR", 5, 1, 1 );
        MunsellColorModel purple = new MunsellColorModel( "G", 5, 1, 1 );

        MunsellColorModel result1 = twoColorMix( red, purple );
        System.out.print( result1.getHueString() );

    }

    /**
     * Mixes 2 colors.
     * 
     * @param color1
     *            the first color
     * @param color2
     *            the second color
     * @return The mixed color
     */

    // Hue and Degree, respectively.
    HashMap< Double, Double > hueDegree = new HashMap< Double, Double >();

    public static MunsellColorModel twoColorMix( MunsellColorModel color1,
        MunsellColorModel color2 )
    {
        HarmoniousConversionUtilities.populateHue();
        HarmoniousConversionUtilities.populateNumbers();
        MunsellColorModel result = null;
        double resultHue = 0;
        double hueOfColor1 = HarmoniousConversionUtilities.munsellObjectToHueValue( color1 );
        double hueOfColor2 = HarmoniousConversionUtilities.munsellObjectToHueValue( color2 );
        double color1Degree = hueOfColor1;
        double color2Degree = hueOfColor2;
        if ( hueOfColor1 >= 80 )
        {
            color1Degree -= 80;
            color1Degree *= 3.6;
        } else
        {
            color1Degree += 20;
            color1Degree *= 3.6;
        }
        if ( hueOfColor2 >= 80 )
        {
            color2Degree -= 80;
            color2Degree *= 3.6;
        } else
        {
            color2Degree += 20;
            color2Degree *= 3.6;
        }
        double color1Radian = Math.toRadians( color1Degree );
        double color2Radian = Math.toRadians( color2Degree );
        Point2D.Double color1Point = new Point2D.Double(
            color1.getChroma() * Math.cos( color1Radian ),
            color1.getChroma() * Math.sin( color1Radian ) );
        Point2D.Double color2Point = new Point2D.Double(
            color2.getChroma() * Math.cos( color2Radian ),
            color2.getChroma() * Math.sin( color2Radian ) );
        double resultX = ( color1Point.x + color2Point.x ) / 2;
        double resultY = ( color1Point.y + color2Point.y ) / 2;
        Point2D.Double resultPoint = new Point2D.Double( resultX, resultY );
        double resultChroma = Math.sqrt( resultX * resultX + resultY * resultY );
        double resultHueAngle = Math.atan( resultY / resultX );

        if (resultX < 0 && resultY < 0)
        {
            resultHueAngle += Math.toRadians( 180 );
            resultHue = (Math.toDegrees( resultHueAngle ) / 3.6) - 30;
            result = HarmoniousConversionUtilities.hueValueToMunsellObject( resultHue, color1 );
            return result;
        }
        if ( resultX < 0 )
        {
            //System.out.print( "first if" );

            resultHueAngle += Math.toRadians( 180 );
            resultHue = (Math.toDegrees( resultHueAngle ) / 3.6) - 20;
            result = HarmoniousConversionUtilities.hueValueToMunsellObject( resultHue, color1 );
            return result;
        }

        if ( resultY > 0 && resultX > 0 )
        {
            //System.out.print( "second if" );
            resultHue = (Math.toDegrees( resultHueAngle ) / 3.6) + 80;
            result = HarmoniousConversionUtilities.hueValueToMunsellObject( resultHue, color1 );
            return result;
        }
        
        if (resultX > 0 && resultY < 0)
        {
            //System.out.print( "third if" );
            //System.out.print( Math.toDegrees( resultHueAngle ) +360);

            resultHue = ((Math.toDegrees( resultHueAngle )+360) / 3.6) - 20 ;
            result = HarmoniousConversionUtilities.hueValueToMunsellObject( resultHue, color1 );
            result.setChroma( resultChroma );
            result.setValue( (color1.getValue() + color2.getValue())/2 );
            return result;
        }
        //if ( resultX == 0 && resultY < 0 )
        //{
         //   resultHueAngle = 270;
        //}
        result = HarmoniousConversionUtilities.hueValueToMunsellObject( resultHue, color1 );

        return result;
    }
}
