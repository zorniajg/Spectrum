import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

/**
 * The main program GUI. (attempted to) Rename for clarity. (but it didn't like
 * it when i tried to commit with the new name).
 * 
 * @author Kelly Ortega, Alex Tran, Ben Girardi, Jacob Zorniak, Mateo
 *         Price-Aguirre
 * 
 * @version 28 October, 2019: created to display the Spectrum features.
 *
 */
public class GUI extends JFrame
{

    private static final long serialVersionUID = 1L;

    private static ColorPanel p1;

    /**
     * initializes the program.
     * 
     * @param args commandline args.
     * @throws IOException in case it can't read a file.
     * @throws MalformedURLException in case it can't read the URL.
     */
    public static void main(String args[]) throws MalformedURLException, IOException
    {
        JFrame frame = new JFrame("Spectrum");
        frame.setLayout(new BorderLayout());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JTabbedPane tabbedPane = new JTabbedPane();

        p1 = new ColorPanel();
        PixelSelect p2 = new PixelSelect();
        JPanel nullPanel = new JPanel();
        nullPanel.setLayout(null);
        nullPanel.add(p1);
        
        JPanel south = new JPanel();
        JPanel east = new JPanel();
        
        east.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        

        JLabel huePrompt = new JLabel("Enter hue value: ");
        c.gridx = 0;
        c.gridy = 0;
        east.add(huePrompt, c);
        JTextField hueValue = new JTextField(5);
        c.gridx = 1;
        c.gridy = 0;
        east.add(hueValue, c);
        String[] hueStrings = {"R", "YR", "Y", "GY", "G", "BG", "B", "PB", "P", "RP"};
        JComboBox hueString = new JComboBox(hueStrings);
        c.gridx = 2;
        c.gridy = 0;
        east.add(hueString, c);
        
        hueString.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                String hue = (String) hueString.getSelectedItem();

                try
                {
                    nullPanel.remove(p1);
                    p1 = new ColorPanel(hue, Double.parseDouble(hueValue.getText()));
                    nullPanel.add(p1);
                    nullPanel.revalidate();
                    nullPanel.repaint();
                }
                catch (NumberFormatException e1)
                {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
                catch (IOException e1)
                {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
            }
        });

        JButton complementary = new JButton("Complementary Colors");
        complementary.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                JFrame showComplementary = new JFrame("Complementary Color");
                showComplementary.setBounds(0, 0, 300, 300);
                JPanel compPanel = new JPanel();
                int[] rgb;
                try
                {
                    rgb = Utilities.MunsellToRGB(
                            HarmoniousConversionUtilities
                                    .complementaryConversion(p1.getCurrentColor()),
                            Utilities.openMunsell2RGB("Munsell2RGB.csv"));

                    if (rgb[0] > 255)
                    {
                        rgb[0] = 255;
                    }

                    if (rgb[1] > 255)
                    {
                        rgb[1] = 255;
                    }

                    if (rgb[2] > 255)
                    {
                        rgb[2] = 255;
                    }

                    if (rgb[0] < 0)
                    {
                        rgb[0] = 0;
                    }

                    if (rgb[1] < 0)
                    {
                        rgb[1] = 0;
                    }

                    if (rgb[2] < 0)
                    {
                        rgb[2] = 0;
                    }
                    Color compColor = new Color(rgb[0], rgb[1], rgb[2]);
                    compPanel.setBackground(compColor);
                    JLabel compColorInfo = new JLabel(HarmoniousConversionUtilities
                            .complementaryConversion(p1.getCurrentColor()).toString());
                    compPanel.add(compColorInfo);
                    showComplementary.add(compPanel);
                    showComplementary.setVisible(true);
                }
                catch (IOException e1)
                {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
            }
        });

        JButton analogous = new JButton("Analogous Colors");
        analogous.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                JFrame showAnalogous = new JFrame("Analogous Colors");
                showAnalogous.setLayout(new GridBagLayout());
                showAnalogous.setBounds(0, 0, 400, 300);
                int[] rgb;
                for (MunsellColorModel color : HarmoniousConversionUtilities
                        .analogousColors(p1.getCurrentColor()))
                {
                    try
                    {
                        rgb = Utilities.MunsellToRGB(color,
                                Utilities.openMunsell2RGB("Munsell2RGB.csv"));

                        if (rgb[0] > 255)
                        {
                            rgb[0] = 255;
                        }

                        if (rgb[1] > 255)
                        {
                            rgb[1] = 255;
                        }

                        if (rgb[2] > 255)
                        {
                            rgb[2] = 255;
                        }

                        if (rgb[0] < 0)
                        {
                            rgb[0] = 0;
                        }

                        if (rgb[1] < 0)
                        {
                            rgb[1] = 0;
                        }

                        if (rgb[2] < 0)
                        {
                            rgb[2] = 0;
                        }

                        Color analogousColor = new Color(rgb[0], rgb[1], rgb[2]);
                        JPanel analogousPanel = new JPanel();
                        analogousPanel.setBackground(analogousColor);
                        JLabel compColorInfo = new JLabel(color.toString());
                        analogousPanel.add(compColorInfo);
                        showAnalogous.add(analogousPanel);
                    }
                    catch (IOException e1)
                    {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                }
                showAnalogous.setVisible(true);
            }
        });

        JButton triad = new JButton("Triad Colors");
        triad.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                JFrame showTriad = new JFrame("Triad Colors");
                showTriad.setLayout(new GridBagLayout());
                showTriad.setBounds(0, 0, 500, 300);
                int[] rgb;
                for (MunsellColorModel color : HarmoniousConversionUtilities
                        .triadColors(p1.getCurrentColor()))
                {
                    try
                    {
                        rgb = Utilities.MunsellToRGB(color,
                                Utilities.openMunsell2RGB("Munsell2RGB.csv"));

                        if (rgb[0] > 255)
                        {
                            rgb[0] = 255;
                        }

                        if (rgb[1] > 255)
                        {
                            rgb[1] = 255;
                        }

                        if (rgb[2] > 255)
                        {
                            rgb[2] = 255;
                        }

                        if (rgb[0] < 0)
                        {
                            rgb[0] = 0;
                        }

                        if (rgb[1] < 0)
                        {
                            rgb[1] = 0;
                        }

                        if (rgb[2] < 0)
                        {
                            rgb[2] = 0;
                        }
                        Color triadColor = new Color(rgb[0], rgb[1], rgb[2]);
                        JPanel triadPanel = new JPanel();

                        JLabel triadColorInfo = new JLabel(HarmoniousConversionUtilities
                                .triadColors(p1.getCurrentColor()).toString());

                        triadPanel.setBackground(triadColor);
                        // JLabel triadColorInfo = new JLabel(color.toString());
                        triadPanel.add(triadColorInfo);
                        showTriad.add(triadPanel);
                    }
                    catch (IOException e1)
                    {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                }
                showTriad.setVisible(true);
            }
        });

        JButton square = new JButton("Square Colors");
        square.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                JFrame showSquare = new JFrame("Square Colors");
                showSquare.setLayout(new GridBagLayout());
                showSquare.setBounds(0, 0, 700, 300);
                int[] rgb;
                for (MunsellColorModel color : HarmoniousConversionUtilities
                        .squareColors(p1.getCurrentColor()))
                {
                    try
                    {
                        rgb = Utilities.MunsellToRGB(color,
                                Utilities.openMunsell2RGB("Munsell2RGB.csv"));

                        if (rgb[0] > 255)
                        {
                            rgb[0] = 255;
                        }

                        if (rgb[1] > 255)
                        {
                            rgb[1] = 255;
                        }

                        if (rgb[2] > 255)
                        {
                            rgb[2] = 255;
                        }

                        if (rgb[0] < 0)
                        {
                            rgb[0] = 0;
                        }

                        if (rgb[1] < 0)
                        {
                            rgb[1] = 0;
                        }

                        if (rgb[2] < 0)
                        {
                            rgb[2] = 0;
                        }
                        Color squareColor = new Color(rgb[0], rgb[1], rgb[2]);
                        JPanel squarePanel = new JPanel();

                        JLabel triadColorInfo = new JLabel(HarmoniousConversionUtilities
                                .triadColors(p1.getCurrentColor()).toString());

                        squarePanel.setBackground(squareColor);
                        // JLabel triadColorInfo = new JLabel(color.toString());
                        squarePanel.add(triadColorInfo);
                        showSquare.add(squarePanel);
                    }
                    catch (IOException e1)
                    {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                }
                showSquare.setVisible(true);
            }
        });

        JButton tetrad = new JButton("Tetrad Colors");
        tetrad.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                JFrame showSquare = new JFrame("Tetrad Colors");
                showSquare.setLayout(new GridBagLayout());
                showSquare.setBounds(0, 0, 850, 300);
                int[] rgb;
                for (MunsellColorModel color : HarmoniousConversionUtilities
                        .tetradColors(p1.getCurrentColor()))
                {
                    try
                    {
                        rgb = Utilities.MunsellToRGB(color,
                                Utilities.openMunsell2RGB("Munsell2RGB.csv"));

                        if (rgb[0] > 255)
                        {
                            rgb[0] = 255;
                        }

                        if (rgb[1] > 255)
                        {
                            rgb[1] = 255;
                        }

                        if (rgb[2] > 255)
                        {
                            rgb[2] = 255;
                        }

                        if (rgb[0] < 0)
                        {
                            rgb[0] = 0;
                        }

                        if (rgb[1] < 0)
                        {
                            rgb[1] = 0;
                        }

                        if (rgb[2] < 0)
                        {
                            rgb[2] = 0;
                        }

                        Color tetradColor = new Color(rgb[0], rgb[1], rgb[2]);
                        JPanel tetradPanel = new JPanel();

                        JLabel triadColorInfo = new JLabel(HarmoniousConversionUtilities
                                .triadColors(p1.getCurrentColor()).toString());

                        tetradPanel.setBackground(tetradColor);
                        // JLabel triadColorInfo = new JLabel(color.toString());
                        tetradPanel.add(triadColorInfo);
                        showSquare.add(tetradPanel);
                    }
                    catch (IOException e1)
                    {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                }
                showSquare.setVisible(true);
            }
        });

        // JButton

        south.add(complementary);
        south.add(analogous);
        south.add(triad);
        south.add(square);
        south.add(tetrad);

        frame.add(south, BorderLayout.SOUTH);
        frame.add(east, BorderLayout.EAST);
        // For future tabs
        // JComponent p2 = null;
        // tabbedPane.addTab("test", p2);

        frame.add(tabbedPane);
        tabbedPane.addTab("ColorPanel", nullPanel);
        tabbedPane.addTab("PixelSelector", p2);
        frame.setSize(1280, 800);
        frame.setVisible(true);

    }
}
