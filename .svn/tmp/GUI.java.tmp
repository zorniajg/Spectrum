import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;


/**
 * The main program GUI. (attempted to) Rename for clarity. (but it didn't like
 * it when i tried to commit with the new name).
 * 
 * @author Kelly Ortega, Alex Tran, Ben Girardi, Jacob Zorniak, Mateo
 *         Price-Aguirre
 * 
 * @version 28 October, 2019: created to display the Spectrum features.
 *
 */
public class GUI extends JFrame
{

    private static final long serialVersionUID = 1L;

    /**
     * initializes the program.
     * 
     * @param args commandline args.
     * @throws IOException in case it can't read a file.
     * @throws MalformedURLException in case it can't read the URL.
     */
    public static void main(String args[]) throws MalformedURLException, IOException
    {
        JFrame frame = new JFrame("Spectrum");
        frame.setLayout(new BorderLayout());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JTabbedPane tabbedPane = new JTabbedPane();
        
       
        
        ColorPanel p1 = new ColorPanel();
        PixelSelect p2 = new PixelSelect();
        
      
       
        
        	ChangeListener changeListener = new ChangeListener() 
        	{
	            public void stateChanged(ChangeEvent changeEvent) 
	            {
	              JTabbedPane sourceTabbedPane = (JTabbedPane) changeEvent.getSource();
	              int index = sourceTabbedPane.getSelectedIndex();
	              if(index == 0)
	              {
	            	  try 
	            	  {
	            		  new ColorPanel();
	            	  } 
	            	  catch (IOException e) 
	            	  {
							// TODO Auto-generated catch block
							e.printStackTrace();
	            	  }
	              }
	              if(index == 1)
	              {
	            	  try 
	            	  {
	            		   new PixelSelect();
	            		 
	            	  } catch (IOException e) 
	            	  {
						
						e.printStackTrace();
					}
	              }
	            }
        };
      
       
        

        JPanel south = new JPanel();

        JButton complementary = new JButton("Complementary Colors");
        complementary.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                JFrame showComplementary = new JFrame("Complementary Color");
                showComplementary.setBounds(0, 0, 300, 300);
                JPanel compPanel = new JPanel();
                int[] rgb;
                rgb = Utilities.MunsellToRGB(
				        HarmoniousConversionUtilities
				                .complementaryConversion(p1.getCurrentColor()),
				        Utilities.openMunsell2RGB("Munsell2RGB.csv"));
                
                if(rgb[0] > 255)
			    {
			    	rgb[0] = 255;
			    }
			    
			    if( rgb[1] > 255)
			    {
			    	rgb[1] = 255;
			    }
			    
			    if(rgb[2] > 255 )
			    {
			    	rgb[2] = 255;
			    }
			    
			    if(rgb[0] < 0)
			    {
			    	rgb[0] = 0;
			    }
			    
			    if( rgb[1] < 0)
			    {
			    	rgb[1] = 0;
			    }
			    
			    if(rgb[2] < 0 )
			    {
			    	rgb[2] = 0;
			    }
				Color compColor = new Color(rgb[0], rgb[1], rgb[2]);
				compPanel.setBackground(compColor);
				JLabel compColorInfo = new JLabel(HarmoniousConversionUtilities
				        .complementaryConversion(p1.getCurrentColor()).toString());
				compPanel.add(compColorInfo);
				showComplementary.add(compPanel);
				showComplementary.setVisible(true);
            }
        });

        JButton analogous = new JButton("Analogous Colors");
        analogous.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                JFrame showAnalogous = new JFrame("Analogous Colors");
                showAnalogous.setLayout(new GridBagLayout());
                showAnalogous.setBounds(0, 0, 300, 300);
                int[] rgb;
                for (MunsellColorModel color : HarmoniousConversionUtilities
				        .analogousColors(p1.getCurrentColor()))
				{
				    rgb = Utilities.MunsellToRGB(color,
				            Utilities.openMunsell2RGB("Munsell2RGB.csv"));
				    
				    if(rgb[0] > 255)
				    {
				    	rgb[0] = 255;
				    }
				    
				    if( rgb[1] > 255)
				    {
				    	rgb[1] = 255;
				    }
				    
				    if(rgb[2] > 255 )
				    {
				    	rgb[2] = 255;
				    }
				    
				    if(rgb[0] < 0)
				    {
				    	rgb[0] = 0;
				    }
				    
				    if( rgb[1] < 0)
				    {
				    	rgb[1] = 0;
				    }
				    
				    if(rgb[2] < 0 )
				    {
				    	rgb[2] = 0;
				    }

				    Color analogousColor = new Color(rgb[0], rgb[1], rgb[2]);
				    JPanel analogousPanel = new JPanel();
				    analogousPanel.setBackground(analogousColor);
				    JLabel compColorInfo = new JLabel(color.toString());
				    analogousPanel.add(compColorInfo);
				    showAnalogous.add(analogousPanel);
				}
				showAnalogous.setVisible(true);
            }
        });
        
        JButton triad = new JButton("Triad Colors");
        triad.addActionListener(new ActionListener()
        		{
        	public void actionPerformed(ActionEvent e)
            {
                JFrame showTriad = new JFrame("Triad Colors");
                showTriad.setLayout(new GridBagLayout());
                showTriad.setBounds(0, 0, 300, 300);
                int[] rgb;
                for (MunsellColorModel color : HarmoniousConversionUtilities
				        .triadColors(p1.getCurrentColor()))
				{
				    rgb = Utilities.MunsellToRGB(color,
				            Utilities.openMunsell2RGB("Munsell2RGB.csv"));
				    if(rgb[0] > 255)
				    {
				    	rgb[0] = 255;
				    }
				    
				    if( rgb[1] > 255)
				    {
				    	rgb[1] = 255;
				    }
				    
				    if(rgb[2] > 255 )
				    {
				    	rgb[2] = 255;
				    }
				    
				    if(rgb[0] < 0)
				    {
				    	rgb[0] = 0;
				    }
				    
				    if( rgb[1] < 0)
				    {
				    	rgb[1] = 0;
				    }
				    
				    if(rgb[2] < 0 )
				    {
				    	rgb[2] = 0;
				    }
				    Color triadColor = new Color(rgb[0], rgb[1], rgb[2]);
				    JPanel triadPanel = new JPanel();
				    
				    JLabel triadColorInfo = new JLabel(HarmoniousConversionUtilities
				            .triadColors(p1.getCurrentColor()).toString());
				    
				    triadPanel.setBackground(triadColor);
				    //JLabel triadColorInfo = new JLabel(color.toString());
				    triadPanel.add(triadColorInfo);
				    showTriad.add(triadPanel);
				}
				showTriad.setVisible(true);
            }
        });
        	
        		

        JButton square = new JButton("Square Colors");
        square.addActionListener(new ActionListener()
		{
        	public void actionPerformed(ActionEvent e)
        	{
		        JFrame showSquare= new JFrame("Square Colors");
		        showSquare.setLayout(new GridBagLayout());
		        showSquare.setBounds(0, 0, 300, 300);
		        int[] rgb;
		        for (MunsellColorModel color : HarmoniousConversionUtilities
				        .squareColors(p1.getCurrentColor()))
				{
				    rgb = Utilities.MunsellToRGB(color,
				            Utilities.openMunsell2RGB("Munsell2RGB.csv"));
				    if(rgb[0] > 255)
				    {
				    	rgb[0] = 255;
				    }
				    
				    if( rgb[1] > 255)
				    {
				    	rgb[1] = 255;
				    }
				    
				    if(rgb[2] > 255 )
				    {
				    	rgb[2] = 255;
				    }
				    
				    if(rgb[0] < 0)
				    {
				    	rgb[0] = 0;
				    }
				    
				    if( rgb[1] < 0)
				    {
				    	rgb[1] = 0;
				    }
				    
				    if(rgb[2] < 0 )
				    {
				    	rgb[2] = 0;
				    }
				    Color squareColor = new Color(rgb[0], rgb[1], rgb[2]);
				    JPanel squarePanel = new JPanel();
				    
				    JLabel triadColorInfo = new JLabel(HarmoniousConversionUtilities
				            .triadColors(p1.getCurrentColor()).toString());
				    
				    squarePanel.setBackground(squareColor);
				    //JLabel triadColorInfo = new JLabel(color.toString());
				    squarePanel.add(triadColorInfo);
				    showSquare.add(squarePanel);
				}
		        showSquare.setVisible(true);
		    }
});
        
        JButton tetrad = new JButton("Tetrad Colors");
        tetrad.addActionListener(new ActionListener()
		{
        	public void actionPerformed(ActionEvent e)
        	{
		        JFrame showSquare= new JFrame("Tetrad Colors");
		        showSquare.setLayout(new GridBagLayout());
		        showSquare.setBounds(0, 0, 400, 300);
		        int[] rgb;
		        for (MunsellColorModel color : HarmoniousConversionUtilities
				        .tetradColors(p1.getCurrentColor()))
				{
				    rgb = Utilities.MunsellToRGB(color,
				            Utilities.openMunsell2RGB("Munsell2RGB.csv"));
				    
				    if(rgb[0] > 255)
				    {
				    	rgb[0] = 255;
				    }
				    
				    if( rgb[1] > 255)
				    {
				    	rgb[1] = 255;
				    }
				    
				    if(rgb[2] > 255 )
				    {
				    	rgb[2] = 255;
				    }
				    
				    if(rgb[0] < 0)
				    {
				    	rgb[0] = 0;
				    }
				    
				    if( rgb[1] < 0)
				    {
				    	rgb[1] = 0;
				    }
				    
				    if(rgb[2] < 0 )
				    {
				    	rgb[2] = 0;
				    }

				    Color tetradColor = new Color(rgb[0], rgb[1], rgb[2]);
				    JPanel tetradPanel = new JPanel();
				    
				    JLabel triadColorInfo = new JLabel(HarmoniousConversionUtilities
				            .triadColors(p1.getCurrentColor()).toString());
				    
				    tetradPanel.setBackground(tetradColor);
				    //JLabel triadColorInfo = new JLabel(color.toString());
				    tetradPanel.add(triadColorInfo);
				    showSquare.add(tetradPanel);
				}
		        showSquare.setVisible(true);
		    }
});
        
        
        //JButton 

        south.add(complementary);
        south.add(analogous);
        south.add(triad);
        south.add(square);
        south.add(tetrad);
        
      
        frame.add(south, BorderLayout.SOUTH);
<<<<<<< .mine
        
        PixelSelect p2 = new PixelSelect();
        tabbedPane.addTab("Pixel Selector", p2);
        
        // For future tabs
        // JComponent p2 = null;
        // tabbedPane.addTab("test", p2);

=======
       
>>>>>>> .r55
        frame.add(tabbedPane);
        tabbedPane.addTab("ColorPanel", p1);
        tabbedPane.addTab("PixelSelector",  p2);
        frame.setSize(1000, 800);
        tabbedPane.addChangeListener(changeListener);
        frame.setVisible(true);

    }
}
