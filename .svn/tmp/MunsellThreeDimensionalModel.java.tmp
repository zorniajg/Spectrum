import javafx.animation.*;
import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.transform.*;
import javafx.stage.Stage;
import javafx.util.Duration;

<<<<<<< .mine
public class MunsellThreeDimensionalModel extends Application {

=======
/**
 * The 3D representation of the Munsell color space.
 * 
 * @author Jacob Zorniak
 * @version 18 November, 2019: Created to represent the Munsell color space in 3D.
 *
 */
>>>>>>> .r76
    private Parent createContent() throws Exception {
        Cylinder valuesCylinder = new Cylinder(5, 10);
        valuesCylinder.setMaterial(new PhongMaterial(Color.FORESTGREEN));

<<<<<<< .mine
        valuesCylinder.setTranslateZ(7);
        valuesCylinder.setTranslateX(2);
=======
    /**
     * Initialized the 3D elements and displays them.
     */
    private static void initAndShowGUI()
    {
        // This method is invoked on the EDT thread
        JFrame frame = new JFrame( "Swing and JavaFX" );
        final JFXPanel fxPanel = new JFXPanel();
        frame.add( fxPanel );
        frame.setSize( 300, 200 );
        frame.setVisible( true );
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
>>>>>>> .r76

<<<<<<< .mine
        Box box = new Box(5, 5, 1);
        box.setMaterial(new PhongMaterial(Color.RED));
=======
        Platform.runLater( new Runnable()
        {
            @Override
            public void run()
            {
                initFX( fxPanel );
            }
        } );
    }
>>>>>>> .r76

<<<<<<< .mine
        Translate pivot = new Translate();
        Rotate yRotate = new Rotate(0, Rotate.Y_AXIS);

        // Create and position camera
        PerspectiveCamera camera = new PerspectiveCamera(true);
        camera.getTransforms().addAll (
                pivot,
                yRotate,
                new Rotate(-20, Rotate.X_AXIS),
                new Translate(0, 0, -50)
        );

        // animate the camera position.
        Timeline timeline = new Timeline(
                new KeyFrame(
                        Duration.seconds(0), 
                        new KeyValue(yRotate.angleProperty(), 0)
                ),
                new KeyFrame(
                        Duration.seconds(15), 
                        new KeyValue(yRotate.angleProperty(), 360)
                )
        );
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();
=======
    /**
     * Initializes the JFXPanel.
     * 
     * @param fxPanel
     *            the JFXPanel to initialize.
     */
    private static void initFX( JFXPanel fxPanel )
    {
        // This method is invoked on the JavaFX thread
        Scene scene = createScene();
        fxPanel.setScene( scene );
    }
>>>>>>> .r76

<<<<<<< .mine
        // Build the Scene Graph
        Group root = new Group();       
        root.getChildren().add(camera);
        root.getChildren().add(box);
        root.getChildren().add(valuesCylinder);
=======
    /**
     * Creates the scene.
     * 
     * @return the scene reated.
     */
    private static Scene createScene()
    {
        Group root = new Group();
        Scene scene = new Scene( root, Color.ALICEBLUE );
        Text text = new Text();
>>>>>>> .r76

<<<<<<< .mine
        // set the pivot for the camera position animation base upon mouse clicks on objects
        root.getChildren().stream()
                .filter(node -> !(node instanceof Camera))
                .forEach(node ->
                        node.setOnMouseClicked(event -> {
                            pivot.setX(node.getTranslateX());
                            pivot.setY(node.getTranslateY());
                            pivot.setZ(node.getTranslateZ());
                        })
                );
=======
        text.setX( 40 );
        text.setY( 100 );
        text.setFont( new Font( 25 ) );
        text.setText( "Welcome JavaFX!" );
>>>>>>> .r76

<<<<<<< .mine
        // Use a SubScene
        SubScene subScene = new SubScene(
                root,
                800,800,
                true,
                SceneAntialiasing.BALANCED
        );
        subScene.setFill(Color.ALICEBLUE);
        subScene.setCamera(camera);
        Group group = new Group();
        group.getChildren().add(subScene);
=======
        root.getChildren().add( text );
>>>>>>> .r76

<<<<<<< .mine
        return group;
=======
        return ( scene );
>>>>>>> .r76
    }

<<<<<<< .mine
    @Override
    public void start(Stage stage) throws Exception {
        stage.setResizable(false);
        Scene scene = new Scene(createContent());
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
=======
    /**
     * Main for testing purposes, probably
     * 
     * @param args
     *            command line args
     */
    public static void main( String[] args )
    {
        SwingUtilities.invokeLater( new Runnable()
        {
            @Override
            public void run()
            {
                initAndShowGUI();
            }
        } );
>>>>>>> .r76
    }
}
